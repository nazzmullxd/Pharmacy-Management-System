@page
@model Web.Pages.Products.CategoriesModel
@{
    ViewData["Title"] = "Product Categories";
}

<!-- Enhanced Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-tags text-primary"></i> Product Categories</h1>
            <p class="mb-0">Manage product categories for better organization and filtering</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/Products" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Products
            </a>
            <button type="button" class="btn btn-outline-info" onclick="exportCategories()">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>
</div>

<!-- Add New Category Card -->
<div class="dashboard-card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-plus-circle text-success me-2"></i>Add New Category
        </h5>
    </div>
    <div class="card-body">
        <form method="post" asp-page-handler="Add">
            <div class="row g-3 align-items-end">
                <div class="col-md-8">
                    <label class="form-label text-muted small">Category Name</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-tag text-muted"></i>
                        </span>
                        <input name="category" 
                               class="form-control" 
                               placeholder="Enter category name (e.g., Antibiotics, Pain Relief)"
                               required
                               maxlength="100" />
                    </div>
                    <small class="form-text text-muted">Enter a clear, descriptive category name</small>
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-plus"></i> Add Category
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Categories Overview -->
<div class="dashboard-card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="fas fa-list text-primary me-2"></i>All Categories
            <span class="badge bg-primary ms-2">@Model.Categories.Count()</span>
        </h5>
        <div class="d-flex gap-2">
            <button class="btn btn-sm btn-outline-secondary" onclick="refreshCategories()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                        type="button" 
                        data-bs-toggle="dropdown" 
                        aria-expanded="false">
                    <i class="fas fa-cog"></i> Options
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" href="#" onclick="exportCategories()">
                        <i class="fas fa-download me-2"></i>Export Categories
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="sortCategories('asc')">
                        <i class="fas fa-sort-alpha-down me-2"></i>Sort A-Z
                    </a></li>
                    <li><a class="dropdown-item" href="#" onclick="sortCategories('desc')">
                        <i class="fas fa-sort-alpha-up me-2"></i>Sort Z-A
                    </a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Categories != null && Model.Categories.Any())
        {
            <div class="row" id="categoriesContainer">
                @foreach (var category in Model.Categories)
                {
                    <div class="col-lg-4 col-md-6 mb-3 category-item" data-category="@category">
                        <div class="category-card p-3 h-100">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="category-info flex-grow-1">
                                    <h6 class="category-name mb-2">
                                        <i class="fas fa-tag text-primary me-2"></i>@category
                                    </h6>
                                    <small class="text-muted">
                                        <i class="fas fa-pills me-1"></i>
                                        <span class="product-count">0 products</span>
                                    </small>
                                </div>
                                <div class="category-actions">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                                type="button" 
                                                data-bs-toggle="dropdown" 
                                                aria-expanded="false"
                                                title="Category Actions">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="/Products?category=@category">
                                                <i class="fas fa-eye me-2"></i>View Products
                                            </a></li>
                                            <li><a class="dropdown-item" href="#" onclick="editCategory('@category')">
                                                <i class="fas fa-edit me-2"></i>Edit Category
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><button class="dropdown-item text-danger" onclick="deleteCategory('@category')">
                                                <i class="fas fa-trash me-2"></i>Delete Category
                                            </button></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-info category-badge">
                                        <i class="fas fa-tag me-1"></i>Category
                                    </span>
                                    <a href="/Products?category=@category" 
                                       class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-arrow-right"></i> View Products
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state text-center py-5">
                <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                <h6 class="text-muted">No Categories Found</h6>
                <p class="text-muted mb-3">Start organizing your products by creating your first category</p>
                <button class="btn btn-primary" onclick="focusNewCategoryInput()">
                    <i class="fas fa-plus"></i> Add First Category
                </button>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .category-card {
            background: #fff;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            transition: all 0.3s ease;
            position: relative;
        }

        .category-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border-color: #007bff;
        }

        .category-info h6 {
            color: #495057;
            font-weight: 600;
        }

        .category-badge {
            font-size: 0.75rem;
        }

        .empty-state {
            background: #f8f9fa;
            border-radius: 8px;
            margin: 20px 0;
        }

        .dashboard-card .card-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 1px solid #dee2e6;
        }

        .input-group-text {
            background: #f8f9fa;
            border-color: #ced4da;
        }

        .category-item {
            transition: all 0.3s ease;
        }

        .btn-outline-primary:hover .fas {
            transform: translateX(2px);
            transition: transform 0.2s ease;
        }

        @@media (max-width: 768px) {
            .page-header .d-flex {
                flex-direction: column;
                gap: 1rem;
            }
            
            .page-header .btn {
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // Focus on new category input
        function focusNewCategoryInput() {
            const input = document.querySelector('input[name="category"]');
            if (input) {
                input.focus();
                input.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // Export categories
        function exportCategories() {
            const categories = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Categories));
            if (categories.length === 0) {
                alert('No categories to export');
                return;
            }

            console.log('Exporting categories:', categories);
            alert(`Export functionality will be implemented to export ${categories.length} categories`);
        }

        // Refresh categories
        function refreshCategories() {
            window.location.reload();
        }

        // Sort categories
        function sortCategories(direction) {
            const container = document.getElementById('categoriesContainer');
            const items = Array.from(container.children);
            
            items.sort((a, b) => {
                const categoryA = a.getAttribute('data-category').toLowerCase();
                const categoryB = b.getAttribute('data-category').toLowerCase();
                
                if (direction === 'asc') {
                    return categoryA.localeCompare(categoryB);
                } else {
                    return categoryB.localeCompare(categoryA);
                }
            });
            
            // Clear container and re-append sorted items
            container.innerHTML = '';
            items.forEach(item => container.appendChild(item));
            
            // Show feedback
            const icon = direction === 'asc' ? 'fa-sort-alpha-down' : 'fa-sort-alpha-up';
            const toast = document.createElement('div');
            toast.className = 'alert alert-success alert-dismissible fade show position-fixed';
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 250px;';
            toast.innerHTML = `
                <i class="fas ${icon} me-2"></i>Categories sorted ${direction === 'asc' ? 'A-Z' : 'Z-A'}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(toast);
            
            // Auto dismiss after 3 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }

        // Edit category
        function editCategory(categoryName) {
            const newName = prompt(`Edit category name:`, categoryName);
            if (newName && newName.trim() !== '' && newName !== categoryName) {
                console.log(`Renaming category from "${categoryName}" to "${newName}"`);
                alert('Edit functionality will be implemented');
            }
        }

        // Delete category
        function deleteCategory(categoryName) {
            if (confirm(`Are you sure you want to delete the category "${categoryName}"?\n\nThis action cannot be undone and may affect product organization.`)) {
                console.log(`Deleting category: ${categoryName}`);
                alert('Delete functionality will be implemented');
            }
        }

        // Update product counts (simulated)
        document.addEventListener('DOMContentLoaded', function() {
            // Simulate product counts for demonstration
            const categoryItems = document.querySelectorAll('.category-item');
            categoryItems.forEach((item, index) => {
                const countElement = item.querySelector('.product-count');
                if (countElement) {
                    const randomCount = Math.floor(Math.random() * 50) + 1;
                    countElement.textContent = `${randomCount} product${randomCount !== 1 ? 's' : ''}`;
                }
            });

            // Add form validation
            const form = document.querySelector('form[asp-page-handler="Add"]');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const input = form.querySelector('input[name="category"]');
                    const value = input.value.trim();
                    
                    if (!value) {
                        e.preventDefault();
                        input.focus();
                        
                        // Show validation feedback
                        input.classList.add('is-invalid');
                        let feedback = input.parentNode.parentNode.querySelector('.invalid-feedback');
                        if (!feedback) {
                            feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            input.parentNode.parentNode.appendChild(feedback);
                        }
                        feedback.textContent = 'Please enter a category name';
                        
                        // Remove validation after user starts typing
                        input.addEventListener('input', function() {
                            input.classList.remove('is-invalid');
                            if (feedback) feedback.remove();
                        });
                    }
                });
            }
        });

        // Auto-focus on category input when page loads
        window.addEventListener('load', function() {
            const input = document.querySelector('input[name="category"]');
            if (input && window.location.hash !== '#categories') {
                setTimeout(() => input.focus(), 100);
            }
        });
    </script>
}
