@page
@model Web.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Products Management";
}

<!-- Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-pills text-primary"></i> Products Management</h1>
            <p class="mb-0">Manage your pharmacy's product catalog, inventory, and pricing information</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/Products/Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add New Product
            </a>
            <a href="/Products/Categories" class="btn btn-outline-info">
                <i class="fas fa-tags"></i> Categories
            </a>
            <button type="button" class="btn btn-outline-secondary" onclick="exportProducts()">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>
</div>

<!-- Quick Actions & Filters -->
<div class="dashboard-card mb-4">
    <div class="row align-items-center">
        <div class="col-md-4">
            <h6 class="mb-2 text-muted">Quick Actions</h6>
            <div class="d-flex gap-2 flex-wrap">
                <a href="/Products/Create" class="btn btn-sm btn-success">
                    <i class="fas fa-plus-circle"></i> Add Product
                </a>
                <a href="/Products/Categories" class="btn btn-sm btn-outline-info">
                    <i class="fas fa-tags"></i> Categories
                </a>
                <button class="btn btn-sm btn-outline-secondary" onclick="refreshPage()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label small text-muted">Filter by Category</label>
                    <select class="form-select form-select-sm" id="categoryFilter">
                        <option value="">All Categories</option>
                        <option value="Antibiotics">Antibiotics</option>
                        <option value="Pain Relief">Pain Relief</option>
                        <option value="Vitamins">Vitamins</option>
                        <option value="Cold & Flu">Cold & Flu</option>
                        <option value="First Aid">First Aid</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label small text-muted">Stock Status</label>
                    <select class="form-select form-select-sm" id="stockFilter">
                        <option value="">All Stock</option>
                        <option value="in-stock">In Stock</option>
                        <option value="low-stock">Low Stock</option>
                        <option value="out-of-stock">Out of Stock</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label small text-muted">Search Products</label>
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control" id="searchInput" placeholder="Product name, barcode...">
                        <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Products Summary Cards -->
<div class="kpi-grid mb-4">
    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Total Products</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #3498db, #5dade2);">
                <i class="fas fa-pills"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Products?.Count() ?? 0)</div>
        <div class="kpi-change positive">
            <i class="fas fa-chart-bar"></i> Active products
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">In Stock</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #27ae60, #2ecc71);">
                <i class="fas fa-check-circle"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Products?.Count(p => p.TotalStock > 0) ?? 0)</div>
        <div class="kpi-change positive">
            <i class="fas fa-arrow-up"></i> Available products
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Low Stock</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #f39c12, #f7dc6f);">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Products?.Count(p => p.IsLowStock) ?? 0)</div>
        <div class="kpi-change @(Model.Products?.Count(p => p.IsLowStock) > 5 ? "negative" : "")">
            <i class="fas @(Model.Products?.Count(p => p.IsLowStock) > 5 ? "fa-exclamation-triangle" : "fa-check-circle")"></i> 
            @(Model.Products?.Count(p => p.IsLowStock) > 5 ? "Needs attention" : "Under control")
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Out of Stock</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #e74c3c, #ec7063);">
                <i class="fas fa-times-circle"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Products?.Count(p => p.TotalStock == 0) ?? 0)</div>
        <div class="kpi-change @(Model.Products?.Count(p => p.TotalStock == 0) > 0 ? "negative" : "positive")">
            <i class="fas @(Model.Products?.Count(p => p.TotalStock == 0) > 0 ? "fa-exclamation-triangle" : "fa-check-circle")"></i> 
            @(Model.Products?.Count(p => p.TotalStock == 0) > 0 ? "Immediate attention" : "All stocked")
        </div>
    </div>
</div>

<!-- Products Table -->
<div class="table-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0"><i class="fas fa-list text-primary"></i> All Products</h5>
        <div class="d-flex align-items-center gap-3">
            <small class="text-muted">
                Showing @(Model.Products?.Count() ?? 0) products
            </small>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleView('table')" id="tableViewBtn">
                    <i class="fas fa-table"></i>
                </button>
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleView('card')" id="cardViewBtn">
                    <i class="fas fa-th-large"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Table View -->
    <div id="tableView" class="table-responsive">
        <table class="table table-hover" id="productsTable">
            <thead class="table-light">
                <tr>
                    <th class="sortable" data-sort="0">
                        <i class="fas fa-pills text-muted me-1"></i>Product Name
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="sortable" data-sort="1">
                        <i class="fas fa-flask text-muted me-1"></i>Generic Name
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="sortable" data-sort="2">
                        <i class="fas fa-tags text-muted me-1"></i>Category
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="sortable" data-sort="3">
                        <i class="fas fa-industry text-muted me-1"></i>Manufacturer
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-end sortable" data-sort="4">
                        <i class="fas fa-dollar-sign text-muted me-1"></i>Unit Price
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-center sortable" data-sort="5">
                        <i class="fas fa-cubes text-muted me-1"></i>Stock
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-center">
                        <i class="fas fa-toggle-on text-muted me-1"></i>Status
                    </th>
                    <th class="text-center" style="width: 150px;">
                        <i class="fas fa-cogs text-muted me-1"></i>Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Products != null && Model.Products.Any())
                {
                    @foreach (var product in Model.Products)
                    {
                        <tr class="product-row" data-product-id="@product.ProductID">
                            <td>
                                <div class="product-info">
                                    <div class="product-name">@product.ProductName</div>
                                    @if (!string.IsNullOrEmpty(product.Barcode))
                                    {
                                        <small class="product-barcode text-muted">
                                            <i class="fas fa-barcode me-1"></i>@product.Barcode
                                        </small>
                                    }
                                </div>
                            </td>
                            <td>
                                <div class="generic-info">
                                    <div class="generic-name">@product.GenericName</div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-info category-badge">
                                    <i class="fas fa-tag me-1"></i>@product.Category
                                </span>
                            </td>
                            <td>
                                <div class="manufacturer-info">
                                    <div class="manufacturer-name">@product.Manufacturer</div>
                                </div>
                            </td>
                            <td class="text-end">
                                <div class="price-info">
                                    <strong class="product-price">$@product.UnitPrice.ToString("F2")</strong>
                                </div>
                            </td>
                            <td class="text-center">
                                @if (product.TotalStock == 0)
                                {
                                    <span class="badge bg-danger stock-badge">
                                        <i class="fas fa-times-circle me-1"></i>Out of Stock
                                    </span>
                                }
                                else if (product.IsLowStock)
                                {
                                    <span class="badge bg-warning stock-badge">
                                        <i class="fas fa-exclamation-triangle me-1"></i>@product.TotalStock (Low)
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-success stock-badge">
                                        <i class="fas fa-check-circle me-1"></i>@product.TotalStock
                                    </span>
                                }
                            </td>
                            <td class="text-center">
                                @if (product.IsActive)
                                {
                                    <span class="badge bg-success status-badge">
                                        <i class="fas fa-check-circle me-1"></i>Active
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary status-badge">
                                        <i class="fas fa-pause-circle me-1"></i>Inactive
                                    </span>
                                }
                            </td>
                            <td>
                                <div class="action-buttons d-flex gap-1 justify-content-center">
                                    <a href="/Products/Details/@product.ProductID" 
                                       class="btn btn-sm btn-outline-info" 
                                       title="View Details"
                                       data-bs-toggle="tooltip">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/Products/Edit/@product.ProductID" 
                                       class="btn btn-sm btn-outline-primary" 
                                       title="Edit Product"
                                       data-bs-toggle="tooltip">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                                type="button" 
                                                data-bs-toggle="dropdown" 
                                                aria-expanded="false"
                                                title="More Actions">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="/Products/Details/@product.ProductID">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a></li>
                                            <li><a class="dropdown-item" href="/Products/Edit/@product.ProductID">
                                                <i class="fas fa-edit me-2"></i>Edit Product
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" href="/Stock/Batches?productId=@product.ProductID">
                                                <i class="fas fa-boxes me-2"></i>Manage Batches
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><button class="dropdown-item text-danger" onclick="confirmDelete('@product.ProductID', '@product.ProductName')">
                                                <i class="fas fa-trash me-2"></i>Delete Product
                                            </button></li>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8" class="text-center py-5">
                            <div class="empty-state">
                                <i class="fas fa-pills fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">No products found</h6>
                                <p class="text-muted mb-3">Get started by adding your first product to the catalog</p>
                                <a href="/Products/Create" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Add First Product
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Card View (Alternative View) -->
    <div id="cardView" style="display: none;" class="row">
        @if (Model.Products != null && Model.Products.Any())
        {
            @foreach (var product in Model.Products)
            {
                <div class="col-lg-6 col-xl-4 mb-3">
                    <div class="card product-card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">@product.ProductName</h6>
                            @if (product.IsActive)
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive</span>
                            }
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <p class="mb-1"><strong>@product.GenericName</strong></p>
                                    <small class="text-muted">@product.Category</small>
                                </div>
                                <h5 class="text-primary mb-0">$@product.UnitPrice.ToString("F2")</h5>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                @if (product.TotalStock == 0)
                                {
                                    <span class="badge bg-danger">Out of Stock</span>
                                }
                                else if (product.IsLowStock)
                                {
                                    <span class="badge bg-warning">@product.TotalStock (Low)</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">@product.TotalStock in stock</span>
                                }
                                <small class="text-muted">by @product.Manufacturer</small>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex gap-1">
                                <a href="/Products/Details/@product.ProductID" class="btn btn-sm btn-outline-info flex-fill">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/Products/Edit/@product.ProductID" class="btn btn-sm btn-outline-primary flex-fill">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Enhanced Pagination -->
@if (Model.Products != null && Model.Products.Count() > 25)
{
    <nav aria-label="Products pagination" class="mt-4">
        <div class="d-flex justify-content-between align-items-center">
            <div class="pagination-info">
                <small class="text-muted">
                    Showing <strong>1-@Math.Min(25, Model.Products.Count())</strong> of <strong>@Model.Products.Count()</strong> products
                </small>
            </div>
            <ul class="pagination justify-content-center mb-0">
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                        <i class="fas fa-chevron-left"></i> Previous
                    </a>
                </li>
                <li class="page-item active">
                    <a class="page-link" href="#">1</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">2</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">3</a>
                </li>
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">
                        Next <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            </ul>
            <div class="page-size-selector">
                <select class="form-select form-select-sm" style="width: auto;">
                    <option value="25" selected>25 per page</option>
                    <option value="50">50 per page</option>
                    <option value="100">100 per page</option>
                </select>
            </div>
        </div>
    </nav>
}

@section Scripts {
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Enhanced filtering functionality
        document.getElementById('categoryFilter').addEventListener('change', function() {
            filterProducts();
        });

        document.getElementById('stockFilter').addEventListener('change', function() {
            filterProducts();
        });

        // Enhanced Search functionality
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');

        searchInput.addEventListener('input', debounce(filterProducts, 300));
        searchBtn.addEventListener('click', filterProducts);

        function filterProducts() {
            const categoryFilter = document.getElementById('categoryFilter').value.toLowerCase();
            const stockFilter = document.getElementById('stockFilter').value.toLowerCase();
            const searchTerm = searchInput.value.toLowerCase();
            const rows = document.querySelectorAll('#productsTable tbody tr.product-row');
            
            let visibleCount = 0;
            
            rows.forEach(row => {
                const categoryCell = row.querySelector('.category-badge');
                const productNameCell = row.querySelector('.product-name');
                const barcodeCell = row.querySelector('.product-barcode');
                const stockCell = row.querySelector('.stock-badge');
                
                let shouldShow = true;
                
                // Category filter
                if (categoryFilter && categoryCell) {
                    const category = categoryCell.textContent.toLowerCase();
                    if (!category.includes(categoryFilter)) {
                        shouldShow = false;
                    }
                }
                
                // Stock filter
                if (stockFilter && stockCell && shouldShow) {
                    const stockText = stockCell.textContent.toLowerCase();
                    if (stockFilter === 'in-stock' && stockText.includes('out of stock')) {
                        shouldShow = false;
                    } else if (stockFilter === 'low-stock' && !stockText.includes('low')) {
                        shouldShow = false;
                    } else if (stockFilter === 'out-of-stock' && !stockText.includes('out of stock')) {
                        shouldShow = false;
                    }
                }
                
                // Search filter
                if (searchTerm && shouldShow) {
                    const searchableText = [
                        productNameCell?.textContent || '',
                        barcodeCell?.textContent || ''
                    ].join(' ').toLowerCase();
                    
                    if (!searchableText.includes(searchTerm)) {
                        shouldShow = false;
                    }
                }
                
                row.style.display = shouldShow ? '' : 'none';
                if (shouldShow) visibleCount++;
            });
            
            // Update results count
            updateResultsCount(visibleCount);
            
            // Show no results message if needed
            toggleNoResultsMessage(visibleCount === 0);
        }

        function updateResultsCount(count) {
            const countElement = document.querySelector('.table-container small');
            if (countElement) {
                countElement.textContent = `Showing ${count} products`;
            }
        }

        function toggleNoResultsMessage(show) {
            let noResultsRow = document.getElementById('noResultsRow');
            
            if (show && !noResultsRow) {
                const tbody = document.querySelector('#productsTable tbody');
                noResultsRow = document.createElement('tr');
                noResultsRow.id = 'noResultsRow';
                noResultsRow.innerHTML = `
                    <td colspan="8" class="text-center py-4">
                        <div class="empty-state">
                            <i class="fas fa-search fa-2x text-muted mb-2"></i>
                            <h6 class="text-muted">No products match your criteria</h6>
                            <p class="text-muted mb-0">Try adjusting your filters or search terms</p>
                        </div>
                    </td>
                `;
                tbody.appendChild(noResultsRow);
            } else if (!show && noResultsRow) {
                noResultsRow.remove();
            }
        }

        // View toggle functionality
        function toggleView(viewType) {
            const tableView = document.getElementById('tableView');
            const cardView = document.getElementById('cardView');
            const tableBtn = document.getElementById('tableViewBtn');
            const cardBtn = document.getElementById('cardViewBtn');
            
            if (viewType === 'table') {
                tableView.style.display = 'block';
                cardView.style.display = 'none';
                tableBtn.classList.add('btn-primary');
                tableBtn.classList.remove('btn-outline-secondary');
                cardBtn.classList.add('btn-outline-secondary');
                cardBtn.classList.remove('btn-primary');
            } else {
                tableView.style.display = 'none';
                cardView.style.display = 'block';
                cardBtn.classList.add('btn-primary');
                cardBtn.classList.remove('btn-outline-secondary');
                tableBtn.classList.add('btn-outline-secondary');
                tableBtn.classList.remove('btn-primary');
            }
            
            // Save preference
            localStorage.setItem('productsViewPreference', viewType);
        }

        // Restore view preference
        document.addEventListener('DOMContentLoaded', function() {
            const savedView = localStorage.getItem('productsViewPreference') || 'table';
            toggleView(savedView);
        });

        // Export functionality
        function exportProducts() {
            const visibleRows = Array.from(document.querySelectorAll('#productsTable tbody tr.product-row'))
                .filter(row => row.style.display !== 'none');
            
            if (visibleRows.length === 0) {
                alert('No data to export');
                return;
            }
            
            console.log(`Exporting ${visibleRows.length} products...`);
            alert(`Export functionality will be implemented to export ${visibleRows.length} products`);
        }

        // Refresh page
        function refreshPage() {
            window.location.reload();
        }

        // Delete confirmation
        function confirmDelete(productId, productName) {
            if (confirm(`Are you sure you want to delete "${productName}"? This action cannot be undone.`)) {
                console.log(`Deleting product: ${productId}`);
                // In a real implementation, this would make an API call
                alert('Delete functionality will be implemented');
            }
        }

        // Sort functionality
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function() {
                const columnIndex = this.getAttribute('data-sort');
                
                // Toggle sort direction
                let sortDirection = 'asc';
                if (this.classList.contains('sort-asc')) {
                    sortDirection = 'desc';
                    this.classList.remove('sort-asc');
                    this.classList.add('sort-desc');
                } else {
                    sortDirection = 'asc';
                    this.classList.remove('sort-desc');
                    this.classList.add('sort-asc');
                }
                
                // Remove sort classes from other headers
                document.querySelectorAll('.sortable').forEach(h => {
                    if (h !== this) {
                        h.classList.remove('sort-asc', 'sort-desc');
                    }
                });
                
                // Perform sort
                sortTable(columnIndex, sortDirection);
            });
        });

        function sortTable(columnIndex, direction) {
            const tbody = document.querySelector('#productsTable tbody');
            const rows = Array.from(tbody.querySelectorAll('tr.product-row'));
            
            rows.sort((a, b) => {
                const aVal = a.cells[columnIndex].textContent.trim();
                const bVal = b.cells[columnIndex].textContent.trim();
                
                // Handle numeric values (price and stock)
                if (columnIndex === '4') { // Price column
                    const aNum = parseFloat(aVal.replace(/[$,]/g, ''));
                    const bNum = parseFloat(bVal.replace(/[$,]/g, ''));
                    return direction === 'asc' ? aNum - bNum : bNum - aNum;
                }
                
                // Handle text values
                const comparison = aVal.localeCompare(bVal);
                return direction === 'asc' ? comparison : -comparison;
            });
            
            // Reorder rows
            rows.forEach(row => tbody.appendChild(row));
        }

        // Debounce function for search
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Auto-refresh every 5 minutes
        setInterval(function() {
            if (document.visibilityState === 'visible') {
                // Only refresh if page is visible and no filters are applied
                const hasFilters = document.getElementById('categoryFilter').value || 
                                 document.getElementById('stockFilter').value ||
                                 document.getElementById('searchInput').value;
                
                if (!hasFilters) {
                    console.log('Auto-refreshing products data...');
                    window.location.reload();
                }
            }
        }, 300000); // 5 minutes
    </script>
}
