@page
@model Web.Pages.IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h4 mb-0">Welcome @Model.UserEmail</h1>
        <form method="post" asp-page-handler="Logout" class="m-0">
            <button type="submit" class="btn btn-sm btn-outline-danger">
                <i class="fas fa-sign-out-alt me-1"></i> Logout
            </button>
        </form>
    </div>

    <div class="row g-3 mb-4" id="kpi-cards">
        <div class="col-6 col-md-3">
            <div class="card h-100">
                <div class="card-body p-3 text-center" aria-live="polite" aria-atomic="true">
                    <div class="fw-semibold small text-muted">Today Orders</div>
                    <div class="fs-5 fw-bold" data-kpi="todayOrders" role="status">
                        <div class="spinner-border spinner-border-sm text-primary d-none" role="status" data-kpi-loading="todayOrders">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span data-kpi-value="todayOrders">--</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card h-100">
                <div class="card-body p-3 text-center" aria-live="polite" aria-atomic="true">
                    <div class="fw-semibold small text-muted">This Month Orders</div>
                    <div class="fs-5 fw-bold" data-kpi="monthOrders" role="status">
                        <div class="spinner-border spinner-border-sm text-primary d-none" role="status" data-kpi-loading="monthOrders">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span data-kpi-value="monthOrders">--</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card h-100">
                <div class="card-body p-3 text-center" aria-live="polite" aria-atomic="true">
                    <div class="fw-semibold small text-muted">Stock Value</div>
                    <div class="fs-5 fw-bold" data-kpi="stockValue" role="status">
                        <div class="spinner-border spinner-border-sm text-primary d-none" role="status" data-kpi-loading="stockValue">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span data-kpi-value="stockValue">--</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card h-100">
                <div class="card-body p-3 text-center" aria-live="polite" aria-atomic="true">
                    <div class="fw-semibold small text-muted">Outstanding Dues</div>
                    <div class="fs-5 fw-bold text-danger" data-kpi="outstandingDues" role="status">
                        <div class="spinner-border spinner-border-sm text-primary d-none" role="status" data-kpi-loading="outstandingDues">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span data-kpi-value="outstandingDues">--</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Single Chart: Top Stock Products -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Top Stock Products</span>
                    <small class="text-muted">Top 10</small>
                </div>
                <div class="card-body position-relative" style="height:300px;">
                    <canvas id="stockChart"></canvas>
                    <div id="stockEmpty" class="text-muted small position-absolute top-50 start-50 translate-middle d-none">
                        No stock data
                    </div>
                    <div class="spinner-border text-primary position-absolute top-50 start-50 d-none" role="status" id="stockLoading">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (string.Equals(Model.Role, "Admin", StringComparison.OrdinalIgnoreCase))
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">Admin Panel</div>
            <div class="card-body">
                <ul class="mb-0">
                    <li><a href="/UserManagement">Manage Users</a></li>
                    <li><a href="/Reports">View Reports</a></li>
                    <li><a href="/Settings">System Settings</a></li>
                </ul>
            </div>
        </div>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header bg-secondary text-white">Employee Area</div>
            <div class="card-body">
                <p class="mb-0">Access the features assigned to your role.</p>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-header">Resources</div>
        <div class="card-body">
            <a class="btn btn-sm btn-primary" href="https://learn.microsoft.com/aspnet/core" target="_blank">
                ASP.NET Core Docs
            </a>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .kpi-error {
            color: #dc3545 !important;
            font-style: italic;
        }

        .kpi-loading {
            opacity: 0.7;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script>
        const currencyFmt = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });
        let stockChart = null;
        let isRefreshing = false;

        function initStockChart() {
            const ctx = document.getElementById('stockChart');

            if (stockChart) {
                stockChart.destroy();
            }

            stockChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Units',
                        data: [],
                        backgroundColor: '#1cc88a',
                        borderColor: '#17a673',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Units: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Units in Stock'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Products'
                            }
                        }
                    }
                }
            });
        }

        function setLoadingState(key, isLoading) {
            const loadingEl = document.querySelector(`[data-kpi-loading="${key}"]`);
            const valueEl = document.querySelector(`[data-kpi-value="${key}"]`);
            const cardEl = document.querySelector(`[data-kpi="${key}"]`).closest('.card');

            if (loadingEl) loadingEl.classList.toggle('d-none', !isLoading);
            if (valueEl) {
                valueEl.classList.toggle('d-none', isLoading);
                valueEl.classList.toggle('kpi-error', false);
            }
            if (cardEl) cardEl.classList.toggle('kpi-loading', isLoading);
        }

        function setText(key, value) {
            const el = document.querySelector(`[data-kpi-value="${key}"]`);
            if (el) {
                el.textContent = value;
                el.classList.remove('kpi-error');
            }
        }

        function showError(key) {
            const el = document.querySelector(`[data-kpi-value="${key}"]`);
            if (el) {
                el.textContent = 'Error';
                el.classList.add('kpi-error');
            }
        }

        function setStockLoading(isLoading) {
            const loadingEl = document.getElementById('stockLoading');
            const emptyMsg = document.getElementById('stockEmpty');
            const chartEl = document.getElementById('stockChart');

            if (loadingEl) loadingEl.classList.toggle('d-none', !isLoading);
            if (emptyMsg && isLoading) emptyMsg.classList.add('d-none');
            if (chartEl) chartEl.style.opacity = isLoading ? '0.5' : '1';
        }

        async function loadKpis() {
            const kpiKeys = ['todayOrders', 'monthOrders', 'stockValue', 'outstandingDues'];

            kpiKeys.forEach(key => {
                setLoadingState(key, true);
            });

            try {
                const res = await fetch(`@Url.Page("Index", "Kpis")`, {
                    cache: 'no-store',
                    headers: { 'Accept': 'application/json' }
                });

                if (!res.ok) throw new Error(`HTTP ${res.status}`);

                const k = await res.json();
                setText('todayOrders', k.todayOrders);
                setText('monthOrders', k.monthOrders);
                setText('stockValue', currencyFmt.format(k.stockValue));
                setText('outstandingDues', currencyFmt.format(k.outstandingDues));

            } catch (error) {
                console.error('Error loading KPIs:', error);
                kpiKeys.forEach(showError);
            } finally {
                kpiKeys.forEach(key => {
                    setLoadingState(key, false);
                });
            }
        }

        async function loadStock() {
            const emptyMsg = document.getElementById('stockEmpty');
            if (emptyMsg) emptyMsg.classList.add('d-none');

            setStockLoading(true);

            try {
                const res = await fetch(`@Url.Page("Index", "StockStatusData")`, {
                    cache: 'no-store',
                    headers: { 'Accept': 'application/json' }
                });

                if (!res.ok) throw new Error(`HTTP ${res.status}`);

                const data = await res.json();

                if (data.values && data.values.length > 0 && data.values.some(v => v > 0)) {
                    stockChart.data.labels = data.labels;
                    stockChart.data.datasets[0].data = data.values;
                    stockChart.update();
                } else {
                    if (emptyMsg) {
                        emptyMsg.textContent = 'No stock data available';
                        emptyMsg.classList.remove('d-none');
                    }
                }

            } catch (error) {
                console.error('Error loading stock data:', error);
                if (emptyMsg) {
                    emptyMsg.textContent = 'Failed to load stock data';
                    emptyMsg.classList.remove('d-none');
                }
            } finally {
                setStockLoading(false);
            }
        }

        async function safeLoadKpis() {
            if (isRefreshing) return;
            isRefreshing = true;
            try {
                await loadKpis();
            } finally {
                isRefreshing = false;
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            initStockChart();

            try {
                await Promise.allSettled([loadKpis(), loadStock()]);
            } catch (error) {
                console.error('Error initializing dashboard:', error);
            }

            // Refresh KPIs every 60s
            setInterval(safeLoadKpis, 60000);
        });

        window.addEventListener('beforeunload', () => {
            if (stockChart) {
                stockChart.destroy();
            }
        });
    </script>
}