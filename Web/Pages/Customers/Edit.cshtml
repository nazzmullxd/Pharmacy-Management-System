@page "/Customers/Edit/{id}"
@model Web.Pages.Customers.EditModel
@{
    ViewData["Title"] = "Edit Customer";
}

<!-- Enhanced Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-user-edit text-warning"></i> Edit Customer</h1>
            <p class="mb-0">Update customer information for: <strong>@Model.Customer?.CustomerName</strong></p>
        </div>
        <div class="d-flex gap-2">
            <a class="btn btn-outline-secondary" href="/Customers">
                <i class="fas fa-arrow-left"></i> Back to Customers
            </a>
            <a class="btn btn-outline-info" href="/Customers/Details/@Model.Id">
                <i class="fas fa-eye"></i> View Details
            </a>
        </div>
    </div>
</div>

@if (Model.Customer == null)
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>Customer Not Found</strong>
        <p class="mb-0">The customer with ID <code>@Model.Id</code> could not be found.</p>
    </div>
    <a class="btn btn-primary" href="/Customers">
        <i class="fas fa-arrow-left"></i> Return to Customer List
    </a>
}
else
{
    <div class="row">
        <!-- Main Form Section -->
        <div class="col-lg-8">
            <form method="post" class="customer-form">
                <input type="hidden" asp-for="Customer.CustomerID" />
                <div asp-validation-summary="All" class="alert alert-danger"></div>
                
                <!-- Customer Information Card -->
                <div class="dashboard-card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-user text-primary me-2"></i>Customer Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label asp-for="Customer.CustomerName" class="form-label required">Full Name</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-user text-muted"></i>
                                    </span>
                                    <input asp-for="Customer.CustomerName" 
                                           class="form-control" 
                                           placeholder="Enter customer's full name" 
                                           required />
                                </div>
                                <span asp-validation-for="Customer.CustomerName" class="text-danger small"></span>
                            </div>
                            
                            <div class="col-md-6">
                                <label asp-for="Customer.ContactNumber" class="form-label required">Contact Number</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-phone text-muted"></i>
                                    </span>
                                    <input asp-for="Customer.ContactNumber" 
                                           class="form-control" 
                                           placeholder="e.g., +1 234 567 8900" 
                                           pattern="[+]?[0-9\s\-\(\)]+"
                                           required />
                                </div>
                                <span asp-validation-for="Customer.ContactNumber" class="text-danger small"></span>
                            </div>
                            
                            <div class="col-md-6">
                                <label asp-for="Customer.Email" class="form-label required">Email Address</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-envelope text-muted"></i>
                                    </span>
                                    <input asp-for="Customer.Email" 
                                           type="email" 
                                           class="form-control" 
                                           placeholder="customer@example.com" 
                                           required />
                                </div>
                                <span asp-validation-for="Customer.Email" class="text-danger small"></span>
                            </div>
                            
                            <div class="col-md-6">
                                <label asp-for="Customer.Address" class="form-label required">Address</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-map-marker-alt text-muted"></i>
                                    </span>
                                    <textarea asp-for="Customer.Address" 
                                              class="form-control" 
                                              rows="3" 
                                              placeholder="Enter full address including street, city, state, zip code" 
                                              required></textarea>
                                </div>
                                <span asp-validation-for="Customer.Address" class="text-danger small"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Metadata Information -->
                <div class="dashboard-card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle text-info me-2"></i>Customer Metadata
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <strong>Customer ID:</strong>
                                <div class="font-monospace small text-muted">@Model.Customer.CustomerID</div>
                            </div>
                            <div class="col-md-4">
                                <strong>Created Date:</strong>
                                <div class="small text-muted">@Model.Customer.CreatedDate.ToString("MMM dd, yyyy")</div>
                            </div>
                            <div class="col-md-4">
                                <strong>Last Updated:</strong>
                                <div class="small text-muted">@DateTime.Now.ToString("MMM dd, yyyy")</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="dashboard-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-1">Update Customer Information</h6>
                                <small class="text-muted">Make sure all information is accurate before saving</small>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                                    <i class="fas fa-undo"></i> Reset Changes
                                </button>
                                <button type="submit" class="btn btn-warning" id="updateCustomerBtn">
                                    <i class="fas fa-save"></i> Update Customer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <!-- Sidebar Information -->
        <div class="col-lg-4">
            <div class="dashboard-card mb-4 sticky-sidebar">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-history text-secondary me-2"></i>Customer Activity
                    </h6>
                </div>
                <div class="card-body">
                    <div class="text-center py-3">
                        <i class="fas fa-shopping-cart fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Purchase history and activity tracking will be displayed here.</p>
                        <a href="#" class="btn btn-outline-primary btn-sm">View Purchase History</a>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="dashboard-card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-bolt text-warning me-2"></i>Quick Actions
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/Sales/Create?customerId=@Model.Customer.CustomerID" class="btn btn-outline-success btn-sm">
                            <i class="fas fa-plus"></i> New Sale
                        </a>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="confirmDelete()">
                            <i class="fas fa-trash"></i> Delete Customer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Styles {
    <style>
        .required::after {
            content: " *";
            color: #e74c3c;
        }

        .sticky-sidebar {
            position: sticky;
            top: 20px;
        }

        .input-group-text {
            background: #f8f9fa;
            border-color: #ced4da;
        }

        .dashboard-card .card-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 1px solid #dee2e6;
        }

        .customer-form .form-control:focus {
            border-color: #ffc107;
            box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
        }

        .page-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #dee2e6;
        }

        .font-monospace {
            font-family: 'Courier New', monospace;
        }

        /* Mobile responsive styles */
        @@media (max-width: 768px) {
            .page-header .d-flex {
                flex-direction: column;
                gap: 1rem;
            }
            
            .page-header .btn {
                width: 100%;
            }

            .sticky-sidebar {
                position: relative;
            }

            .d-flex.gap-2 {
                flex-direction: column;
            }
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Store original form values for reset functionality
        let originalFormData = {};

        document.addEventListener('DOMContentLoaded', function() {
            // Store original values
            const form = document.querySelector('.customer-form');
            if (form) {
                const formData = new FormData(form);
                for (let [key, value] of formData.entries()) {
                    originalFormData[key] = value;
                }
            }
        });

        // Reset form function
        function resetForm() {
            if (confirm('Are you sure you want to reset all changes? This will revert to the original values.')) {
                const form = document.querySelector('.customer-form');
                Object.keys(originalFormData).forEach(key => {
                    const field = form.querySelector(`[name="${key}"]`);
                    if (field) {
                        field.value = originalFormData[key];
                    }
                });
                // Clear validation errors
                document.querySelectorAll('.text-danger').forEach(el => el.textContent = '');
                document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            }
        }

        // Delete confirmation
        function confirmDelete() {
            if (confirm('Are you sure you want to delete this customer? This action cannot be undone.')) {
                // Create a form for delete action
                const form = document.createElement('form');
                form.method = 'post';
                form.action = window.location.pathname + '?handler=Delete';
                
                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }
                
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Form submission handling
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.customer-form');
            const updateBtn = document.getElementById('updateCustomerBtn');
            
            if (form && updateBtn) {
                form.addEventListener('submit', function(e) {
                    // Show loading state
                    updateBtn.disabled = true;
                    updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
                    
                    // Set a timeout to re-enable button if something goes wrong
                    setTimeout(() => {
                        if (updateBtn.disabled) {
                            updateBtn.disabled = false;
                            updateBtn.innerHTML = '<i class="fas fa-save"></i> Update Customer';
                        }
                    }, 30000); // 30 seconds timeout
                });
            }

            // Remove validation styling on input
            form.querySelectorAll('input, textarea').forEach(field => {
                field.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                    const validationSpan = this.parentNode.parentNode.querySelector('.text-danger');
                    if (validationSpan) {
                        validationSpan.textContent = '';
                    }
                });
            });
        });
    </script>
}


