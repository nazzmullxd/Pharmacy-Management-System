@page
@model Web.Pages.Purchases.CreateModel
@{
    ViewData["Title"] = "New Purchase Order";
}

<!-- Enhanced Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-plus-circle text-success"></i> New Purchase Order</h1>
            <p class="mb-0">Create a new purchase order for inventory restocking</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/Purchases" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Purchases
            </a>
            <a href="/Suppliers" class="btn btn-outline-info">
                <i class="fas fa-truck"></i> Manage Suppliers
            </a>
            <button type="button" class="btn btn-outline-warning" onclick="saveDraft()">
                <i class="fas fa-save"></i> Save Draft
            </button>
        </div>
    </div>
</div>

<div class="row">
    <!-- Main Form Section -->
    <div class="col-lg-8">
        <form method="post" class="purchase-form">
            <!-- Hidden fields for proper model binding -->
            <input asp-for="Order.PurchaseOrderID" type="hidden" />
            <input asp-for="Order.TotalAmount" type="hidden" />
            <input asp-for="Order.PaidAmount" type="hidden" />
            <input asp-for="Order.DueAmount" type="hidden" />
            <input asp-for="Order.Status" type="hidden" />
            <input asp-for="Order.PaymentStatus" type="hidden" />
            
            <!-- Purchase Order Information Card -->
            <div class="dashboard-card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-info-circle text-primary me-2"></i>Purchase Order Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="Order.SupplierID" class="form-label required">Supplier</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-truck text-muted"></i>
                                </span>
                                <select asp-for="Order.SupplierID" class="form-select" id="supplierSelect">
                                    <option value="">-- Select Supplier --</option>
                                    @foreach (var s in Model.Suppliers)
                                    {
                                        <option value="@s.SupplierID">@s.SupplierName</option>
                                    }
                                </select>
                            </div>
                            <span asp-validation-for="Order.SupplierID" class="text-danger small"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Order Date</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-calendar text-muted"></i>
                                </span>
                                <input asp-for="Order.OrderDate" type="date" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                            </div>
                            <small class="form-text text-muted">Order creation date</small>
                        </div>
                        <div class="col-12">
                            <label asp-for="Order.Notes" class="form-label">Order Notes</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-sticky-note text-muted"></i>
                                </span>
                                <textarea asp-for="Order.Notes" 
                                          class="form-control" 
                                          rows="3" 
                                          placeholder="Additional notes, delivery instructions, or special requirements..."></textarea>
                            </div>
                            <span asp-validation-for="Order.Notes" class="text-danger small"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Items Card -->
            <div class="dashboard-card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-plus text-success me-2"></i>Add Purchase Items
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-4">
                            <label class="form-label required">Product</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-pills text-muted"></i>
                                </span>
                                <select name="productId" class="form-select" id="productSelect">
                                    <option value="">-- Select Product --</option>
                                    @foreach (var p in Model.Products)
                                    {
                                        <option value="@p.ProductID" data-price="@p.UnitPrice">@p.ProductName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label required">Quantity</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-cubes text-muted"></i>
                                </span>
                                <input name="quantity" type="number" class="form-control" min="1" placeholder="0" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label required">Unit Price</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-dollar-sign text-muted"></i>
                                </span>
                                <input name="unitPrice" type="number" step="0.01" class="form-control" min="0" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button type="submit" asp-page-handler="AddItem" class="btn btn-success w-100">
                                <i class="fas fa-plus"></i> Add Item
                            </button>
                        </div>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Select a product to auto-fill the unit price, then adjust quantity and price as needed
                        </small>
                    </div>
                </div>
            </div>

            <!-- Order Items Table Card -->
            <div class="dashboard-card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-list text-info me-2"></i>Order Items
                        </h5>
                        <span class="badge bg-primary">
                            @Model.Order.OrderItems.Count item(s)
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Order.OrderItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover" id="orderItemsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th><i class="fas fa-pills text-muted me-1"></i>Product</th>
                                        <th class="text-center"><i class="fas fa-cubes text-muted me-1"></i>Quantity</th>
                                        <th class="text-end"><i class="fas fa-dollar-sign text-muted me-1"></i>Unit Price</th>
                                        <th class="text-end"><i class="fas fa-calculator text-muted me-1"></i>Total</th>
                                        <th class="text-center" style="width: 80px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < Model.Order.OrderItems.Count; i++)
                                    {
                                        <tr class="order-item-row">
                                            <td>
                                                <div class="product-info">
                                                    <div class="product-name">@Model.Order.OrderItems[i].ProductName</div>
                                                    <small class="text-muted">ID: @Model.Order.OrderItems[i].ProductID</small>
                                                </div>
                                                <input type="hidden" asp-for="Order.OrderItems[@i].PurchaseOrderItemID" />
                                                <input type="hidden" asp-for="Order.OrderItems[@i].ProductID" />
                                                <input type="hidden" asp-for="Order.OrderItems[@i].ProductName" />
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-info quantity-badge">@Model.Order.OrderItems[i].OrderedQuantity</span>
                                                <input type="hidden" asp-for="Order.OrderItems[@i].OrderedQuantity" />
                                            </td>
                                            <td class="text-end">
                                                <strong class="text-primary">@Model.Order.OrderItems[i].UnitPrice.ToString("C")</strong>
                                                <input type="hidden" asp-for="Order.OrderItems[@i].UnitPrice" />
                                            </td>
                                            <td class="text-end">
                                                <strong class="text-success">@Model.Order.OrderItems[@i].TotalPrice.ToString("C")</strong>
                                                <input type="hidden" asp-for="Order.OrderItems[@i].TotalPrice" />
                                            </td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeItem(@i)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="empty-state">
                                <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">No items added yet</h6>
                                <p class="text-muted mb-0">Start by selecting products and adding them to your purchase order</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Order Summary and Actions -->
            <div class="dashboard-card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="order-summary">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">Order Total</h6>
                                        <small class="text-muted">@Model.Order.OrderItems.Count item(s)</small>
                                    </div>
                                    <div class="text-end">
                                        <div class="h4 text-success mb-0">@Model.Order.TotalAmount.ToString("C")</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                                    <i class="fas fa-undo"></i> Reset Form
                                </button>
                                <button type="button" class="btn btn-outline-info" onclick="previewOrder()">
                                    <i class="fas fa-eye"></i> Preview
                                </button>
                                <button type="submit" asp-page-handler="Create" class="btn btn-success" id="createOrderBtn">
                                    <i class="fas fa-check-circle"></i> Create Order
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Validation Summary -->
            <div asp-validation-summary="All" class="alert alert-danger mt-3"></div>
        </form>
    </div>

    <!-- Enhanced Sidebar -->
    <div class="col-lg-4">
        <!-- Quick Stats Card -->
        <div class="dashboard-card mb-4 sticky-sidebar">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-chart-pie text-primary me-2"></i>Order Summary
                </h6>
            </div>
            <div class="card-body">
                <div class="summary-metrics">
                    <div class="summary-metric">
                        <div class="d-flex justify-content-between">
                            <span class="text-muted">Total Items:</span>
                            <strong id="totalItems">@Model.Order.OrderItems.Count</strong>
                        </div>
                    </div>
                    <div class="summary-metric">
                        <div class="d-flex justify-content-between">
                            <span class="text-muted">Total Quantity:</span>
                            <strong id="totalQuantity">@Model.Order.OrderItems.Sum(x => x.OrderedQuantity)</strong>
                        </div>
                    </div>
                    <div class="summary-metric">
                        <div class="d-flex justify-content-between">
                            <span class="text-muted">Order Value:</span>
                            <strong class="text-success" id="orderValue">@Model.Order.TotalAmount.ToString("C")</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions Card -->
        <div class="dashboard-card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-bolt text-warning me-2"></i>Quick Actions
                </h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a href="/Suppliers/Create" class="btn btn-outline-info btn-sm">
                        <i class="fas fa-plus"></i> Add New Supplier
                    </a>
                    <a href="/Products/Create" class="btn btn-outline-success btn-sm">
                        <i class="fas fa-pills"></i> Add New Product
                    </a>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="loadTemplate()">
                        <i class="fas fa-file-import"></i> Load Template
                    </button>
                </div>
            </div>
        </div>

        <!-- Guidelines Card -->
        <div class="dashboard-card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-lightbulb text-info me-2"></i>Purchase Guidelines
                </h6>
            </div>
            <div class="card-body">
                <ul class="small text-muted">
                    <li><strong>Supplier:</strong> Select active supplier with good terms</li>
                    <li><strong>Products:</strong> Check current stock levels before ordering</li>
                    <li><strong>Quantities:</strong> Consider minimum order quantities</li>
                    <li><strong>Pricing:</strong> Verify current supplier rates</li>
                </ul>
                
                <div class="mt-3">
                    <h6 class="small text-muted">Order Processing:</h6>
                    <ul class="small text-muted">
                        <li>Orders are created in pending status</li>
                        <li>Stock levels update upon order completion</li>
                        <li>Supplier notifications are sent automatically</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .required::after {
            content: " *";
            color: #e74c3c;
        }

        .sticky-sidebar {
            position: sticky;
            top: 20px;
        }

        .order-item-row:hover {
            background-color: #f8f9fa;
        }

        .product-info {
            line-height: 1.2;
        }

        .product-name {
            font-weight: 600;
        }

        .quantity-badge {
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
        }

        .summary-metric {
            padding: 0.75rem 0;
            border-bottom: 1px solid #f8f9fa;
        }

        .summary-metric:last-child {
            border-bottom: none;
        }

        .order-summary {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            border-left: 4px solid #28a745;
        }

        .input-group-text {
            background: #f8f9fa;
            border-color: #ced4da;
        }

        .dashboard-card .card-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 1px solid #dee2e6;
        }

        .empty-state {
            padding: 2rem;
        }

        /* Mobile responsive styles */
        @@media (max-width: 768px) {
            .page-header .d-flex {
                flex-direction: column;
                gap: 1rem;
            }
            
            .page-header .btn {
                width: 100%;
            }

            .sticky-sidebar {
                position: relative;
            }

            .d-flex.gap-2 {
                flex-direction: column;
            }
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Auto-fill unit price when product is selected
        document.getElementById('productSelect').addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            const price = selectedOption.getAttribute('data-price');
            
            if (price) {
                document.querySelector('input[name="unitPrice"]').value = parseFloat(price).toFixed(2);
            }
        });

        // Remove item function
        function removeItem(index) {
            if (confirm('Are you sure you want to remove this item?')) {
                // Make AJAX call to remove item from server-side model
                const form = document.querySelector('.purchase-form');
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'removeIndex';
                input.value = index;
                form.appendChild(input);
                
                // Submit form with remove action
                const submitBtn = document.createElement('button');
                submitBtn.type = 'submit';
                submitBtn.name = 'handler';
                submitBtn.value = 'RemoveItem';
                submitBtn.style.display = 'none';
                form.appendChild(submitBtn);
                submitBtn.click();
            }
        }

        // Reset form function
        function resetForm() {
            if (confirm('Are you sure you want to reset the form? All entered data will be lost.')) {
                window.location.reload();
            }
        }

        // Preview order function
        function previewOrder() {
            const form = document.querySelector('.purchase-form');
            const supplierSelect = document.querySelector('#Order_SupplierID');
            const orderItemsTable = document.querySelector('.order-items-table tbody');
            
            // Get supplier name
            const supplierName = supplierSelect ? 
                (supplierSelect.options[supplierSelect.selectedIndex]?.text || 'Not selected') : 
                'Not selected';
            
            // Count items
            const itemCount = orderItemsTable ? orderItemsTable.children.length : 0;
            
            // Calculate total from displayed items
            let totalValue = 0;
            if (orderItemsTable) {
                const rows = orderItemsTable.querySelectorAll('tr');
                rows.forEach(row => {
                    const totalCell = row.querySelector('td:last-child');
                    if (totalCell && totalCell.textContent) {
                        const value = parseFloat(totalCell.textContent.replace(/[^0-9.-]+/g, ''));
                        if (!isNaN(value)) totalValue += value;
                    }
                });
            }
            
            // Create preview window
            const previewWindow = window.open('', 'preview', 'width=800,height=600,scrollbars=yes');
            previewWindow.document.write(`
                <html>
                    <head>
                        <title>Purchase Order Preview</title>
                        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
                    </head>
                    <body class="bg-light">
                        <div class="container py-4">
                            <h4><i class="fas fa-eye me-2"></i>Purchase Order Preview</h4>
                            <div class="card">
                                <div class="card-body">
                                    <h5>Order Details</h5>
                                    <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                                    <p><strong>Supplier:</strong> ${supplierName}</p>
                                    <p><strong>Total Items:</strong> ${itemCount}</p>
                                    <p><strong>Total Value:</strong> $${totalValue.toFixed(2)}</p>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-secondary" onclick="window.close()">Close Preview</button>
                                <button class="btn btn-primary" onclick="window.print()">Print</button>
                            </div>
                        </div>
                    </body>
                </html>
            `);
        }

        // Save draft function
        function saveDraft() {
            const form = document.querySelector('.purchase-form');
            const formData = new FormData(form);
            const draftData = {};
            
            for (let [key, value] of formData.entries()) {
                draftData[key] = value;
            }
            
            localStorage.setItem('purchaseOrderDraft', JSON.stringify(draftData));
            
            // Show feedback
            const toast = document.createElement('div');
            toast.className = 'alert alert-success alert-dismissible fade show position-fixed';
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 250px;';
            toast.innerHTML = `
                <i class="fas fa-save me-2"></i>Draft saved successfully
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }

        // Load template function
        function loadTemplate() {
            const savedDraft = localStorage.getItem('purchaseOrderDraft');
            if (savedDraft) {
                if (confirm('Load saved draft? This will overwrite current form data.')) {
                    const draftData = JSON.parse(savedDraft);
                    const form = document.querySelector('.purchase-form');
                    
                    Object.keys(draftData).forEach(key => {
                        const field = form.querySelector(`[name="${key}"]`);
                        if (field) {
                            field.value = draftData[key];
                        }
                    });
                }
            } else {
                alert('No saved draft found');
            }
        }

        });

        // Simple form validation without conflicts
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.purchase-form');
            const createBtn = document.getElementById('createOrderBtn');
            
            // Add form submission handling with loading state
            if (form && createBtn) {
                form.addEventListener('submit', function(e) {
                    // Check if this is the create order submission
                    if (e.submitter && e.submitter.id === 'createOrderBtn') {
                        // Show loading state
                        createBtn.disabled = true;
                        createBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating Order...';
                        
                        // Set a timeout to re-enable button if something goes wrong
                        setTimeout(() => {
                            if (createBtn.disabled) {
                                createBtn.disabled = false;
                                createBtn.innerHTML = '<i class="fas fa-check-circle"></i> Create Order';
                            }
                        }, 30000); // 30 seconds timeout
                    }
                });
            }

            // Remove validation styling on input
            form.querySelectorAll('input, select, textarea').forEach(field => {
                field.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                });
            });

            // Show validation summary if there are errors
            const validationSummary = document.querySelector('[asp-validation-summary]');
            if (validationSummary && validationSummary.children.length > 0) {
                validationSummary.style.display = 'block';
            }
        });
    </script>
}

