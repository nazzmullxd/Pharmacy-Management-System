@page
@model Web.Pages.Sales.InvoicesModel
@{
    ViewData["Title"] = "Sales Invoices";
}

<!-- Enhanced Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-file-invoice text-primary"></i> Sales Invoices</h1>
            <p class="mb-0">View and manage all sales invoices and billing records</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/Sales" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Sales
            </a>
            <a href="/Sales/Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> New Sale
            </a>
            <button type="button" class="btn btn-outline-secondary" onclick="exportInvoices()">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>
</div>

<!-- Quick Filters & Search -->
<div class="dashboard-card mb-4">
    <div class="row align-items-center">
        <div class="col-md-4">
            <h6 class="mb-2 text-muted">Quick Actions</h6>
            <div class="d-flex gap-2 flex-wrap">
                <a href="/Sales/Create" class="btn btn-sm btn-success">
                    <i class="fas fa-plus-circle"></i> New Sale
                </a>
                <button class="btn btn-sm btn-outline-secondary" onclick="refreshPage()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label small text-muted">Filter by Status</label>
                    <select class="form-select form-select-sm" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="paid">Paid</option>
                        <option value="pending">Pending</option>
                        <option value="overdue">Overdue</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label small text-muted">Date Range</label>
                    <select class="form-select form-select-sm" id="dateFilter">
                        <option value="">All Dates</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label small text-muted">Search Invoices</label>
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control" id="searchInput" placeholder="Invoice #, customer name...">
                        <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Invoice Statistics Cards -->
<div class="kpi-grid mb-4">
    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Total Invoices</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #3498db, #5dade2);">
                <i class="fas fa-file-invoice"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Invoices?.Count() ?? 0)</div>
        <div class="kpi-change positive">
            <i class="fas fa-chart-bar"></i> All records
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Total Revenue</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #27ae60, #2ecc71);">
                <i class="fas fa-dollar-sign"></i>
            </div>
        </div>
        <div class="kpi-value">@((Model.Invoices?.Sum(i => i.TotalAmount) ?? 0).ToString("C"))</div>
        <div class="kpi-change positive">
            <i class="fas fa-arrow-up"></i> Total sales
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Paid Invoices</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #28a745, #34ce57);">
                <i class="fas fa-check-circle"></i>
            </div>
        </div>
        <div class="kpi-value">@(Model.Invoices?.Count(i => i.PaymentStatus == "Paid") ?? 0)</div>
        <div class="kpi-change positive">
            <i class="fas fa-money-bill-wave"></i> Completed
        </div>
    </div>

    <div class="kpi-card">
        <div class="kpi-header">
            <div class="kpi-title">Pending Amount</div>
            <div class="kpi-icon" style="background: linear-gradient(45deg, #f39c12, #f7dc6f);">
                <i class="fas fa-clock"></i>
            </div>
        </div>
        <div class="kpi-value">@((Model.Invoices?.Where(i => i.PaymentStatus != "Paid").Sum(i => i.TotalAmount) ?? 0).ToString("C"))</div>
        <div class="kpi-change @(Model.Invoices?.Any(i => i.PaymentStatus != "Paid") == true ? "negative" : "neutral")">
            <i class="fas fa-exclamation-triangle"></i> Outstanding
        </div>
    </div>
</div>

<!-- Invoices Table -->
<div class="table-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0"><i class="fas fa-list text-primary"></i> All Invoices</h5>
        <div class="d-flex align-items-center gap-3">
            <small class="text-muted">
                Showing @(Model.Invoices?.Count() ?? 0) invoices
            </small>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleView('table')" id="tableViewBtn">
                    <i class="fas fa-table"></i>
                </button>
                <button class="btn btn-sm btn-outline-secondary" onclick="toggleView('card')" id="cardViewBtn">
                    <i class="fas fa-th-large"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Table View -->
    <div id="tableView" class="table-responsive">
        <table class="table table-hover" id="invoicesTable">
            <thead class="table-light">
                <tr>
                    <th class="sortable" data-sort="0">
                        <i class="fas fa-hashtag text-muted me-1"></i>Invoice #
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="sortable" data-sort="1">
                        <i class="fas fa-calendar text-muted me-1"></i>Date & Time
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="sortable" data-sort="2">
                        <i class="fas fa-user text-muted me-1"></i>Customer
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-end sortable" data-sort="3">
                        <i class="fas fa-dollar-sign text-muted me-1"></i>Total Amount
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-center sortable" data-sort="4">
                        <i class="fas fa-credit-card text-muted me-1"></i>Payment Status
                        <i class="fas fa-sort text-muted ms-1"></i>
                    </th>
                    <th class="text-center" style="width: 150px;">
                        <i class="fas fa-cogs text-muted me-1"></i>Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Invoices != null && Model.Invoices.Any())
                {
                    @foreach (var invoice in Model.Invoices)
                    {
                        <tr class="invoice-row" data-invoice-id="@invoice.SaleID">
                            <td>
                                <div class="invoice-info">
                                    <div class="invoice-number">#@invoice.SaleID.ToString().PadLeft(8, '0')</div>
                                    <small class="invoice-id text-muted">
                                        <i class="fas fa-tag me-1"></i>ID: @invoice.SaleID
                                    </small>
                                </div>
                            </td>
                            <td>
                                <div class="date-info">
                                    <div class="sale-date">@invoice.SaleDate.ToString("MMM dd, yyyy")</div>
                                    <small class="sale-time text-muted">@invoice.SaleDate.ToString("HH:mm")</small>
                                </div>
                            </td>
                            <td>
                                <div class="customer-info">
                                    @if (!string.IsNullOrEmpty(invoice.CustomerName))
                                    {
                                        <div class="customer-name">@invoice.CustomerName</div>
                                        <small class="text-muted">Customer</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Walk-in Customer</span>
                                    }
                                </div>
                            </td>
                            <td class="text-end">
                                <div class="amount-info">
                                    <strong class="total-amount">@invoice.TotalAmount.ToString("C")</strong>
                                </div>
                            </td>
                            <td class="text-center">
                                @{
                                    var statusColor = invoice.PaymentStatus switch
                                    {
                                        "Paid" => "success",
                                        "Pending" => "warning",
                                        "Overdue" => "danger",
                                        _ => "secondary"
                                    };
                                    var statusIcon = invoice.PaymentStatus switch
                                    {
                                        "Paid" => "fa-check-circle",
                                        "Pending" => "fa-clock",
                                        "Overdue" => "fa-exclamation-triangle",
                                        _ => "fa-question-circle"
                                    };
                                }
                                <span class="badge bg-@statusColor payment-badge">
                                    <i class="fas @statusIcon me-1"></i>@invoice.PaymentStatus
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons d-flex gap-1 justify-content-center">
                                    <a href="/Sales/Invoice/@invoice.SaleID" 
                                       class="btn btn-sm btn-outline-info" 
                                       title="View Invoice"
                                       data-bs-toggle="tooltip">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/Sales/Invoice/@invoice.SaleID?print=true" 
                                       class="btn btn-sm btn-outline-secondary" 
                                       title="Print Invoice"
                                       data-bs-toggle="tooltip"
                                       target="_blank">
                                        <i class="fas fa-print"></i>
                                    </a>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                                type="button" 
                                                data-bs-toggle="dropdown" 
                                                aria-expanded="false"
                                                title="More Actions">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="/Sales/Invoice/@invoice.SaleID">
                                                <i class="fas fa-eye me-2"></i>View Invoice
                                            </a></li>
                                            <li><a class="dropdown-item" href="/Sales/Invoice/@invoice.SaleID?print=true" target="_blank">
                                                <i class="fas fa-print me-2"></i>Print Invoice
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><button class="dropdown-item" onclick="emailInvoice('@invoice.SaleID')">
                                                <i class="fas fa-envelope me-2"></i>Email Invoice
                                            </button></li>
                                            <li><button class="dropdown-item" onclick="downloadPDF('@invoice.SaleID')">
                                                <i class="fas fa-file-pdf me-2"></i>Download PDF
                                            </button></li>
                                            @if (invoice.PaymentStatus != "Paid")
                                            {
                                                <li><hr class="dropdown-divider"></li>
                                                <li><button class="dropdown-item text-warning" onclick="markAsPaid('@invoice.SaleID')">
                                                    <i class="fas fa-check-circle me-2"></i>Mark as Paid
                                                </button></li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="empty-state">
                                <i class="fas fa-file-invoice fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">No invoices found</h6>
                                <p class="text-muted mb-3">Start by creating your first sale to generate invoices</p>
                                <a href="/Sales/Create" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Create First Sale
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Card View (Alternative View) -->
    <div id="cardView" style="display: none;" class="row">
        @if (Model.Invoices != null && Model.Invoices.Any())
        {
            @foreach (var invoice in Model.Invoices)
            {
                <div class="col-lg-6 col-xl-4 mb-3">
                    <div class="card invoice-card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">#@invoice.SaleID.ToString().PadLeft(8, '0')</h6>
                            @{
                                var statusColor = invoice.PaymentStatus switch
                                {
                                    "Paid" => "success",
                                    "Pending" => "warning",
                                    "Overdue" => "danger",
                                    _ => "secondary"
                                };
                            }
                            <span class="badge bg-@statusColor">@invoice.PaymentStatus</span>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <p class="mb-1"><strong>@(invoice.CustomerName ?? "Walk-in Customer")</strong></p>
                                    <small class="text-muted">@invoice.SaleDate.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                                <h5 class="text-primary mb-0">@invoice.TotalAmount.ToString("C")</h5>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex gap-1">
                                <a href="/Sales/Invoice/@invoice.SaleID" class="btn btn-sm btn-outline-info flex-fill">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/Sales/Invoice/@invoice.SaleID?print=true" target="_blank" class="btn btn-sm btn-outline-secondary flex-fill">
                                    <i class="fas fa-print"></i> Print
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Enhanced filtering functionality
        document.getElementById('statusFilter').addEventListener('change', function() {
            filterInvoices();
        });

        document.getElementById('dateFilter').addEventListener('change', function() {
            filterInvoices();
        });

        // Enhanced Search functionality
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');

        searchInput.addEventListener('input', debounce(filterInvoices, 300));
        searchBtn.addEventListener('click', filterInvoices);

        function filterInvoices() {
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const dateFilter = document.getElementById('dateFilter').value.toLowerCase();
            const searchTerm = searchInput.value.toLowerCase();
            const rows = document.querySelectorAll('#invoicesTable tbody tr.invoice-row');
            
            let visibleCount = 0;
            
            rows.forEach(row => {
                const invoiceNumberCell = row.querySelector('.invoice-number');
                const customerNameCell = row.querySelector('.customer-name');
                const paymentBadgeCell = row.querySelector('.payment-badge');
                
                let shouldShow = true;
                
                // Status filter
                if (statusFilter && paymentBadgeCell) {
                    const status = paymentBadgeCell.textContent.toLowerCase();
                    if (!status.includes(statusFilter)) {
                        shouldShow = false;
                    }
                }
                
                // Search filter
                if (searchTerm && shouldShow) {
                    const searchableText = [
                        invoiceNumberCell?.textContent || '',
                        customerNameCell?.textContent || ''
                    ].join(' ').toLowerCase();
                    
                    if (!searchableText.includes(searchTerm)) {
                        shouldShow = false;
                    }
                }
                
                row.style.display = shouldShow ? '' : 'none';
                if (shouldShow) visibleCount++;
            });
            
            // Update results count
            updateResultsCount(visibleCount);
            
            // Show no results message if needed
            toggleNoResultsMessage(visibleCount === 0);
        }

        function updateResultsCount(count) {
            const countElement = document.querySelector('.table-container small');
            if (countElement) {
                countElement.textContent = `Showing ${count} invoices`;
            }
        }

        function toggleNoResultsMessage(show) {
            let noResultsRow = document.getElementById('noResultsRow');
            
            if (show && !noResultsRow) {
                const tbody = document.querySelector('#invoicesTable tbody');
                noResultsRow = document.createElement('tr');
                noResultsRow.id = 'noResultsRow';
                noResultsRow.innerHTML = `
                    <td colspan="6" class="text-center py-4">
                        <div class="empty-state">
                            <i class="fas fa-search fa-2x text-muted mb-2"></i>
                            <h6 class="text-muted">No invoices match your criteria</h6>
                            <p class="text-muted mb-0">Try adjusting your filters or search terms</p>
                        </div>
                    </td>
                `;
                tbody.appendChild(noResultsRow);
            } else if (!show && noResultsRow) {
                noResultsRow.remove();
            }
        }

        // View toggle functionality
        function toggleView(viewType) {
            const tableView = document.getElementById('tableView');
            const cardView = document.getElementById('cardView');
            const tableBtn = document.getElementById('tableViewBtn');
            const cardBtn = document.getElementById('cardViewBtn');
            
            if (viewType === 'table') {
                tableView.style.display = 'block';
                cardView.style.display = 'none';
                tableBtn.classList.add('btn-primary');
                tableBtn.classList.remove('btn-outline-secondary');
                cardBtn.classList.add('btn-outline-secondary');
                cardBtn.classList.remove('btn-primary');
            } else {
                tableView.style.display = 'none';
                cardView.style.display = 'block';
                cardBtn.classList.add('btn-primary');
                cardBtn.classList.remove('btn-outline-secondary');
                tableBtn.classList.add('btn-outline-secondary');
                tableBtn.classList.remove('btn-primary');
            }
            
            // Save preference
            localStorage.setItem('invoicesViewPreference', viewType);
        }

        // Restore view preference
        document.addEventListener('DOMContentLoaded', function() {
            const savedView = localStorage.getItem('invoicesViewPreference') || 'table';
            toggleView(savedView);
        });

        // Export functionality
        function exportInvoices() {
            const visibleRows = Array.from(document.querySelectorAll('#invoicesTable tbody tr.invoice-row'))
                .filter(row => row.style.display !== 'none');
            
            if (visibleRows.length === 0) {
                alert('No data to export');
                return;
            }
            
            console.log(`Exporting ${visibleRows.length} invoices...`);
            alert(`Export functionality will be implemented to export ${visibleRows.length} invoices`);
        }

        // Refresh page
        function refreshPage() {
            window.location.reload();
        }

        // Invoice management functions
        function emailInvoice(invoiceId) {
            console.log(`Emailing invoice: ${invoiceId}`);
            alert('Email invoice functionality will be implemented');
        }

        function downloadPDF(invoiceId) {
            console.log(`Downloading PDF for invoice: ${invoiceId}`);
            alert('PDF download functionality will be implemented');
        }

        function markAsPaid(invoiceId) {
            if (confirm('Mark this invoice as paid? This action will update the payment status.')) {
                console.log(`Marking invoice as paid: ${invoiceId}`);
                alert('Mark as paid functionality will be implemented');
            }
        }

        // Sort functionality
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function() {
                const columnIndex = this.getAttribute('data-sort');
                
                // Toggle sort direction
                let sortDirection = 'asc';
                if (this.classList.contains('sort-asc')) {
                    sortDirection = 'desc';
                    this.classList.remove('sort-asc');
                    this.classList.add('sort-desc');
                } else {
                    sortDirection = 'asc';
                    this.classList.remove('sort-desc');
                    this.classList.add('sort-asc');
                }
                
                // Remove sort classes from other headers
                document.querySelectorAll('.sortable').forEach(h => {
                    if (h !== this) {
                        h.classList.remove('sort-asc', 'sort-desc');
                    }
                });
                
                // Perform sort
                sortTable(columnIndex, sortDirection);
            });
        });

        function sortTable(columnIndex, direction) {
            const tbody = document.querySelector('#invoicesTable tbody');
            const rows = Array.from(tbody.querySelectorAll('tr.invoice-row'));
            
            rows.sort((a, b) => {
                const aVal = a.cells[columnIndex].textContent.trim();
                const bVal = b.cells[columnIndex].textContent.trim();
                
                // Handle numeric values (amount column)
                if (columnIndex === '3') {
                    const aNum = parseFloat(aVal.replace(/[$,]/g, ''));
                    const bNum = parseFloat(bVal.replace(/[$,]/g, ''));
                    return direction === 'asc' ? aNum - bNum : bNum - aNum;
                }
                
                // Handle text values
                const comparison = aVal.localeCompare(bVal);
                return direction === 'asc' ? comparison : -comparison;
            });
            
            // Reorder rows
            rows.forEach(row => tbody.appendChild(row));
        }

        // Debounce function for search
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
}


